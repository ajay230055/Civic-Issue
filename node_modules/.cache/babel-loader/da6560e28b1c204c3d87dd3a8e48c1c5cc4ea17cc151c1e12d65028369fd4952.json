{"ast":null,"code":"const STORAGE_ISSUES = 'issues_store_v1';\nfunction readIssues() {\n  try {\n    const raw = localStorage.getItem(STORAGE_ISSUES);\n    if (!raw) return [];\n    const arr = JSON.parse(raw);\n    return arr.map(i => ({\n      ...i,\n      createdAt: new Date(i.createdAt),\n      updatedAt: new Date(i.updatedAt),\n      resolvedAt: i.resolvedAt ? new Date(i.resolvedAt) : undefined,\n      estimatedResolutionDate: i.estimatedResolutionDate ? new Date(i.estimatedResolutionDate) : undefined,\n      comments: (i.comments || []).map(c => ({\n        ...c,\n        createdAt: new Date(c.createdAt)\n      }))\n    }));\n  } catch {\n    return [];\n  }\n}\nfunction writeIssues(issues) {\n  localStorage.setItem(STORAGE_ISSUES, JSON.stringify(issues));\n}\nexport const fetchIssues = async () => {\n  return readIssues();\n};\nexport const submitIssue = async issueData => {\n  var _issueData$isPublic, _issueData$images;\n  const issues = readIssues();\n  const id = issueData.id || Math.random().toString(36).slice(2);\n  const now = new Date();\n  const computeRewardPoints = category => {\n    switch (category) {\n      case 'sanitation':\n        return 10;\n      case 'waste_management':\n        return 12;\n      case 'water_supply':\n        return 14;\n      case 'electricity':\n        return 14;\n      case 'roads':\n        return 16;\n      case 'infrastructure':\n        return 15;\n      case 'parks':\n        return 8;\n      case 'education':\n        return 9;\n      case 'healthcare':\n        return 18;\n      case 'security':\n        return 20;\n      default:\n        return 5;\n    }\n  };\n  const newIssue = {\n    id,\n    title: issueData.title || 'Issue',\n    description: issueData.description || '',\n    category: issueData.category || 'other',\n    priority: issueData.priority || 'low',\n    status: issueData.status || 'not_completed',\n    location: issueData.location || {\n      address: 'Unknown',\n      coordinates: {\n        lat: 0,\n        lng: 0\n      }\n    },\n    images: issueData.images || [],\n    reporterId: issueData.reporterId || 'me',\n    reporterName: issueData.reporterName || 'Current User',\n    assignedOfficialId: issueData.assignedOfficialId,\n    assignedOfficialName: issueData.assignedOfficialName,\n    createdAt: now,\n    updatedAt: now,\n    resolvedAt: issueData.resolvedAt,\n    estimatedResolutionDate: issueData.estimatedResolutionDate,\n    comments: issueData.comments || [],\n    tags: issueData.tags || [],\n    upvotes: issueData.upvotes || 0,\n    downvotes: issueData.downvotes || 0,\n    isPublic: (_issueData$isPublic = issueData.isPublic) !== null && _issueData$isPublic !== void 0 ? _issueData$isPublic : true,\n    rewardPoints: issueData.status === 'completed' && (((_issueData$images = issueData.images) === null || _issueData$images === void 0 ? void 0 : _issueData$images.length) || 0) > 0 ? computeRewardPoints(issueData.category || 'other') + 10 : computeRewardPoints(issueData.category || 'other')\n  };\n  issues.unshift(newIssue);\n  writeIssues(issues);\n  return newIssue;\n};\nexport const fetchIssueById = async id => {\n  const issues = readIssues();\n  const found = issues.find(i => i.id === id);\n  if (!found) throw new Error('Issue not found');\n  return found;\n};\nexport const addComment = async (issueId, comment) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const newComment = {\n    id: Math.random().toString(36).slice(2),\n    createdAt: new Date(),\n    ...comment\n  };\n  issues[idx] = {\n    ...issues[idx],\n    comments: [...issues[idx].comments, newComment],\n    updatedAt: new Date()\n  };\n  writeIssues(issues);\n  return issues[idx];\n};\nexport const voteIssue = async (issueId, delta) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const issue = issues[idx];\n  const updated = {\n    ...issue,\n    upvotes: issue.upvotes + (delta === 1 ? 1 : 0),\n    downvotes: issue.downvotes + (delta === -1 ? 1 : 0),\n    updatedAt: new Date()\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\nexport const updateIssueStatus = async (issueId, status) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const updated = {\n    ...issues[idx],\n    status,\n    updatedAt: new Date()\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\nexport const assignOfficial = async (issueId, officialId, officialName) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const updated = {\n    ...issues[idx],\n    assignedOfficialId: officialId,\n    assignedOfficialName: officialName,\n    updatedAt: new Date()\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\nexport const completeIssue = async (issueId, completionProof, completedById, completedByName) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const issue = issues[idx];\n\n  // Calculate completion reward\n  const getCompletionReward = () => {\n    const baseReward = (() => {\n      switch (issue.category) {\n        case 'sanitation':\n          return 15;\n        case 'waste_management':\n          return 18;\n        case 'water_supply':\n          return 20;\n        case 'electricity':\n          return 20;\n        case 'roads':\n          return 25;\n        case 'infrastructure':\n          return 22;\n        case 'parks':\n          return 12;\n        case 'education':\n          return 15;\n        case 'healthcare':\n          return 30;\n        case 'security':\n          return 35;\n        default:\n          return 10;\n      }\n    })();\n    const priorityMultiplier = (() => {\n      switch (issue.priority) {\n        case 'critical':\n          return 1.5;\n        case 'high':\n          return 1.3;\n        case 'medium':\n          return 1.1;\n        case 'low':\n          return 1.0;\n        default:\n          return 1.0;\n      }\n    })();\n    return Math.round(baseReward * priorityMultiplier);\n  };\n  const completionReward = getCompletionReward();\n  const now = new Date();\n  const updated = {\n    ...issue,\n    status: 'completed',\n    completionProof,\n    completedById,\n    completedByName,\n    completionReward,\n    completedAt: now,\n    updatedAt: now\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\nexport const reverseGeocode = async (lat, lon) => {\n  try {\n    const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${encodeURIComponent(lat)}&lon=${encodeURIComponent(lon)}`;\n    const res = await fetch(url, {\n      headers: {\n        'Accept': 'application/json'\n      }\n    });\n    if (!res.ok) throw new Error('Reverse geocode failed');\n    const data = await res.json();\n    return data.display_name || `${lat.toFixed(4)}, ${lon.toFixed(4)}`;\n  } catch {\n    return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;\n  }\n};\nexport const login = async credentials => {\n  return {\n    token: 'fake-token',\n    role: credentials.role\n  };\n};\nexport const registerUser = async data => {\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["STORAGE_ISSUES","readIssues","raw","localStorage","getItem","arr","JSON","parse","map","i","createdAt","Date","updatedAt","resolvedAt","undefined","estimatedResolutionDate","comments","c","writeIssues","issues","setItem","stringify","fetchIssues","submitIssue","issueData","_issueData$isPublic","_issueData$images","id","Math","random","toString","slice","now","computeRewardPoints","category","newIssue","title","description","priority","status","location","address","coordinates","lat","lng","images","reporterId","reporterName","assignedOfficialId","assignedOfficialName","tags","upvotes","downvotes","isPublic","rewardPoints","length","unshift","fetchIssueById","found","find","Error","addComment","issueId","comment","idx","findIndex","newComment","voteIssue","delta","issue","updated","updateIssueStatus","assignOfficial","officialId","officialName","completeIssue","completionProof","completedById","completedByName","getCompletionReward","baseReward","priorityMultiplier","round","completionReward","completedAt","reverseGeocode","lon","url","encodeURIComponent","res","fetch","headers","ok","data","json","display_name","toFixed","login","credentials","token","role","registerUser","success"],"sources":["C:/SihApplication/civic issue appp/civic-issue-app/src/services/api.ts"],"sourcesContent":["import { Issue, LoginCredentials, RegistrationData, Comment, IssueStatus, IssuePriority, IssueCategory, CivicHour } from '../types';\n\nconst STORAGE_ISSUES = 'issues_store_v1';\n\nfunction readIssues(): Issue[] {\n  try {\n    const raw = localStorage.getItem(STORAGE_ISSUES);\n    if (!raw) return [];\n    const arr = JSON.parse(raw) as Issue[];\n    return arr.map((i) => ({\n      ...i,\n      createdAt: new Date(i.createdAt),\n      updatedAt: new Date(i.updatedAt),\n      resolvedAt: i.resolvedAt ? new Date(i.resolvedAt) : undefined,\n      estimatedResolutionDate: i.estimatedResolutionDate ? new Date(i.estimatedResolutionDate) : undefined,\n      comments: (i.comments || []).map((c) => ({ ...c, createdAt: new Date(c.createdAt) })),\n    }));\n  } catch {\n    return [];\n  }\n}\n\nfunction writeIssues(issues: Issue[]): void {\n  localStorage.setItem(STORAGE_ISSUES, JSON.stringify(issues));\n}\n\nexport const fetchIssues = async (): Promise<Issue[]> => {\n  return readIssues();\n};\n\nexport const submitIssue = async (issueData: Partial<Issue>): Promise<Issue> => {\n  const issues = readIssues();\n  const id = issueData.id || Math.random().toString(36).slice(2);\n  const now = new Date();\n  const computeRewardPoints = (category: IssueCategory): number => {\n    switch (category) {\n      case 'sanitation': return 10;\n      case 'waste_management': return 12;\n      case 'water_supply': return 14;\n      case 'electricity': return 14;\n      case 'roads': return 16;\n      case 'infrastructure': return 15;\n      case 'parks': return 8;\n      case 'education': return 9;\n      case 'healthcare': return 18;\n      case 'security': return 20;\n      default: return 5;\n    }\n  };\n  const newIssue: Issue = {\n    id,\n    title: issueData.title || 'Issue',\n    description: issueData.description || '',\n    category: (issueData.category as IssueCategory) || 'other',\n    priority: (issueData.priority as IssuePriority) || 'low',\n    status: (issueData.status as IssueStatus) || 'not_completed',\n    location: issueData.location || { address: 'Unknown', coordinates: { lat: 0, lng: 0 } },\n    images: issueData.images || [],\n    reporterId: issueData.reporterId || 'me',\n    reporterName: issueData.reporterName || 'Current User',\n    assignedOfficialId: issueData.assignedOfficialId,\n    assignedOfficialName: issueData.assignedOfficialName,\n    createdAt: now,\n    updatedAt: now,\n    resolvedAt: issueData.resolvedAt,\n    estimatedResolutionDate: issueData.estimatedResolutionDate,\n    comments: issueData.comments || [],\n    tags: issueData.tags || [],\n    upvotes: issueData.upvotes || 0,\n    downvotes: issueData.downvotes || 0,\n    isPublic: issueData.isPublic ?? true,\n    rewardPoints: ((issueData.status as IssueStatus) === 'completed' && (issueData.images?.length || 0) > 0)\n      ? computeRewardPoints((issueData.category as IssueCategory) || 'other') + 10\n      : computeRewardPoints((issueData.category as IssueCategory) || 'other'),\n  };\n  issues.unshift(newIssue);\n  writeIssues(issues);\n  return newIssue;\n};\n\nexport const fetchIssueById = async (id: string): Promise<Issue> => {\n  const issues = readIssues();\n  const found = issues.find((i) => i.id === id);\n  if (!found) throw new Error('Issue not found');\n  return found;\n};\n\nexport const addComment = async (issueId: string, comment: Omit<Comment, 'id' | 'createdAt'>): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const newComment: Comment = { id: Math.random().toString(36).slice(2), createdAt: new Date(), ...comment };\n  issues[idx] = { ...issues[idx], comments: [...issues[idx].comments, newComment], updatedAt: new Date() };\n  writeIssues(issues);\n  return issues[idx];\n};\n\nexport const voteIssue = async (issueId: string, delta: 1 | -1): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const issue = issues[idx];\n  const updated = {\n    ...issue,\n    upvotes: issue.upvotes + (delta === 1 ? 1 : 0),\n    downvotes: issue.downvotes + (delta === -1 ? 1 : 0),\n    updatedAt: new Date(),\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\n\nexport const updateIssueStatus = async (issueId: string, status: IssueStatus): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const updated = { ...issues[idx], status, updatedAt: new Date() };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\n\nexport const assignOfficial = async (issueId: string, officialId: string, officialName: string): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const updated = { ...issues[idx], assignedOfficialId: officialId, assignedOfficialName: officialName, updatedAt: new Date() };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\n\nexport const completeIssue = async (\n  issueId: string, \n  completionProof: string[], \n  completedById: string, \n  completedByName: string\n): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  \n  const issue = issues[idx];\n  \n  // Calculate completion reward\n  const getCompletionReward = (): number => {\n    const baseReward = (() => {\n      switch (issue.category) {\n        case 'sanitation': return 15;\n        case 'waste_management': return 18;\n        case 'water_supply': return 20;\n        case 'electricity': return 20;\n        case 'roads': return 25;\n        case 'infrastructure': return 22;\n        case 'parks': return 12;\n        case 'education': return 15;\n        case 'healthcare': return 30;\n        case 'security': return 35;\n        default: return 10;\n      }\n    })();\n\n    const priorityMultiplier = (() => {\n      switch (issue.priority) {\n        case 'critical': return 1.5;\n        case 'high': return 1.3;\n        case 'medium': return 1.1;\n        case 'low': return 1.0;\n        default: return 1.0;\n      }\n    })();\n\n    return Math.round(baseReward * priorityMultiplier);\n  };\n\n  const completionReward = getCompletionReward();\n  const now = new Date();\n  \n  const updated: Issue = {\n    ...issue,\n    status: 'completed' as IssueStatus,\n    completionProof,\n    completedById,\n    completedByName,\n    completionReward,\n    completedAt: now,\n    updatedAt: now,\n  };\n  \n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\n\nexport const reverseGeocode = async (lat: number, lon: number): Promise<string> => {\n  try {\n    const url = `https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat=${encodeURIComponent(lat)}&lon=${encodeURIComponent(lon)}`;\n    const res = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n      },\n    });\n    if (!res.ok) throw new Error('Reverse geocode failed');\n    const data = await res.json();\n    return data.display_name || `${lat.toFixed(4)}, ${lon.toFixed(4)}`;\n  } catch {\n    return `${lat.toFixed(4)}, ${lon.toFixed(4)}`;\n  }\n};\n\nexport const login = async (credentials: LoginCredentials) => {\n  return { token: 'fake-token', role: credentials.role };\n};\n\nexport const registerUser = async (data: RegistrationData) => {\n  return { success: true };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}