{"ast":null,"code":"const STORAGE_ISSUES = 'issues_store_v1';\nfunction readIssues() {\n  try {\n    const raw = localStorage.getItem(STORAGE_ISSUES);\n    if (!raw) return [];\n    const arr = JSON.parse(raw);\n    return arr.map(i => ({\n      ...i,\n      createdAt: new Date(i.createdAt),\n      updatedAt: new Date(i.updatedAt),\n      resolvedAt: i.resolvedAt ? new Date(i.resolvedAt) : undefined,\n      estimatedResolutionDate: i.estimatedResolutionDate ? new Date(i.estimatedResolutionDate) : undefined,\n      comments: (i.comments || []).map(c => ({\n        ...c,\n        createdAt: new Date(c.createdAt)\n      }))\n    }));\n  } catch {\n    return [];\n  }\n}\nfunction writeIssues(issues) {\n  localStorage.setItem(STORAGE_ISSUES, JSON.stringify(issues));\n}\nexport const fetchIssues = async () => {\n  return readIssues();\n};\nexport const submitIssue = async issueData => {\n  var _issueData$isPublic;\n  const issues = readIssues();\n  const id = issueData.id || Math.random().toString(36).slice(2);\n  const now = new Date();\n  const newIssue = {\n    id,\n    title: issueData.title || 'Issue',\n    description: issueData.description || '',\n    category: issueData.category || 'other',\n    priority: issueData.priority || 'low',\n    status: issueData.status || 'reported',\n    location: issueData.location || {\n      address: 'Unknown',\n      coordinates: {\n        lat: 0,\n        lng: 0\n      }\n    },\n    images: issueData.images || [],\n    reporterId: issueData.reporterId || 'me',\n    reporterName: issueData.reporterName || 'Current User',\n    assignedOfficialId: issueData.assignedOfficialId,\n    assignedOfficialName: issueData.assignedOfficialName,\n    createdAt: now,\n    updatedAt: now,\n    resolvedAt: issueData.resolvedAt,\n    estimatedResolutionDate: issueData.estimatedResolutionDate,\n    comments: issueData.comments || [],\n    tags: issueData.tags || [],\n    upvotes: issueData.upvotes || 0,\n    downvotes: issueData.downvotes || 0,\n    isPublic: (_issueData$isPublic = issueData.isPublic) !== null && _issueData$isPublic !== void 0 ? _issueData$isPublic : true\n  };\n  issues.unshift(newIssue);\n  writeIssues(issues);\n  return newIssue;\n};\nexport const fetchIssueById = async id => {\n  const issues = readIssues();\n  const found = issues.find(i => i.id === id);\n  if (!found) throw new Error('Issue not found');\n  return found;\n};\nexport const addComment = async (issueId, comment) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const newComment = {\n    id: Math.random().toString(36).slice(2),\n    createdAt: new Date(),\n    ...comment\n  };\n  issues[idx] = {\n    ...issues[idx],\n    comments: [...issues[idx].comments, newComment],\n    updatedAt: new Date()\n  };\n  writeIssues(issues);\n  return issues[idx];\n};\nexport const voteIssue = async (issueId, delta) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const issue = issues[idx];\n  const updated = {\n    ...issue,\n    upvotes: issue.upvotes + (delta === 1 ? 1 : 0),\n    downvotes: issue.downvotes + (delta === -1 ? 1 : 0),\n    updatedAt: new Date()\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\nexport const updateIssueStatus = async (issueId, status) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const updated = {\n    ...issues[idx],\n    status,\n    updatedAt: new Date()\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\nexport const assignOfficial = async (issueId, officialId, officialName) => {\n  const issues = readIssues();\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const updated = {\n    ...issues[idx],\n    assignedOfficialId: officialId,\n    assignedOfficialName: officialName,\n    updatedAt: new Date()\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\nexport const login = async credentials => {\n  return {\n    token: 'fake-token',\n    role: credentials.role\n  };\n};\nexport const registerUser = async data => {\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["STORAGE_ISSUES","readIssues","raw","localStorage","getItem","arr","JSON","parse","map","i","createdAt","Date","updatedAt","resolvedAt","undefined","estimatedResolutionDate","comments","c","writeIssues","issues","setItem","stringify","fetchIssues","submitIssue","issueData","_issueData$isPublic","id","Math","random","toString","slice","now","newIssue","title","description","category","priority","status","location","address","coordinates","lat","lng","images","reporterId","reporterName","assignedOfficialId","assignedOfficialName","tags","upvotes","downvotes","isPublic","unshift","fetchIssueById","found","find","Error","addComment","issueId","comment","idx","findIndex","newComment","voteIssue","delta","issue","updated","updateIssueStatus","assignOfficial","officialId","officialName","login","credentials","token","role","registerUser","data","success"],"sources":["C:/SihApplication/civic issue appp/civic-issue-app/src/services/api.ts"],"sourcesContent":["import { Issue, LoginCredentials, RegistrationData, Comment, IssueStatus, IssuePriority } from '../types';\n\nconst STORAGE_ISSUES = 'issues_store_v1';\n\nfunction readIssues(): Issue[] {\n  try {\n    const raw = localStorage.getItem(STORAGE_ISSUES);\n    if (!raw) return [];\n    const arr = JSON.parse(raw) as Issue[];\n    return arr.map((i) => ({\n      ...i,\n      createdAt: new Date(i.createdAt),\n      updatedAt: new Date(i.updatedAt),\n      resolvedAt: i.resolvedAt ? new Date(i.resolvedAt) : undefined,\n      estimatedResolutionDate: i.estimatedResolutionDate ? new Date(i.estimatedResolutionDate) : undefined,\n      comments: (i.comments || []).map((c) => ({ ...c, createdAt: new Date(c.createdAt) })),\n    }));\n  } catch {\n    return [];\n  }\n}\n\nfunction writeIssues(issues: Issue[]): void {\n  localStorage.setItem(STORAGE_ISSUES, JSON.stringify(issues));\n}\n\nexport const fetchIssues = async (): Promise<Issue[]> => {\n  return readIssues();\n};\n\nexport const submitIssue = async (issueData: Partial<Issue>): Promise<Issue> => {\n  const issues = readIssues();\n  const id = issueData.id || Math.random().toString(36).slice(2);\n  const now = new Date();\n  const newIssue: Issue = {\n    id,\n    title: issueData.title || 'Issue',\n    description: issueData.description || '',\n    category: issueData.category || 'other',\n    priority: (issueData.priority as IssuePriority) || 'low',\n    status: issueData.status || 'reported',\n    location: issueData.location || { address: 'Unknown', coordinates: { lat: 0, lng: 0 } },\n    images: issueData.images || [],\n    reporterId: issueData.reporterId || 'me',\n    reporterName: issueData.reporterName || 'Current User',\n    assignedOfficialId: issueData.assignedOfficialId,\n    assignedOfficialName: issueData.assignedOfficialName,\n    createdAt: now,\n    updatedAt: now,\n    resolvedAt: issueData.resolvedAt,\n    estimatedResolutionDate: issueData.estimatedResolutionDate,\n    comments: issueData.comments || [],\n    tags: issueData.tags || [],\n    upvotes: issueData.upvotes || 0,\n    downvotes: issueData.downvotes || 0,\n    isPublic: issueData.isPublic ?? true,\n  };\n  issues.unshift(newIssue);\n  writeIssues(issues);\n  return newIssue;\n};\n\nexport const fetchIssueById = async (id: string): Promise<Issue> => {\n  const issues = readIssues();\n  const found = issues.find((i) => i.id === id);\n  if (!found) throw new Error('Issue not found');\n  return found;\n};\n\nexport const addComment = async (issueId: string, comment: Omit<Comment, 'id' | 'createdAt'>): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const newComment: Comment = { id: Math.random().toString(36).slice(2), createdAt: new Date(), ...comment };\n  issues[idx] = { ...issues[idx], comments: [...issues[idx].comments, newComment], updatedAt: new Date() };\n  writeIssues(issues);\n  return issues[idx];\n};\n\nexport const voteIssue = async (issueId: string, delta: 1 | -1): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const issue = issues[idx];\n  const updated = {\n    ...issue,\n    upvotes: issue.upvotes + (delta === 1 ? 1 : 0),\n    downvotes: issue.downvotes + (delta === -1 ? 1 : 0),\n    updatedAt: new Date(),\n  };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\n\nexport const updateIssueStatus = async (issueId: string, status: IssueStatus): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const updated = { ...issues[idx], status, updatedAt: new Date() };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\n\nexport const assignOfficial = async (issueId: string, officialId: string, officialName: string): Promise<Issue> => {\n  const issues = readIssues();\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const updated = { ...issues[idx], assignedOfficialId: officialId, assignedOfficialName: officialName, updatedAt: new Date() };\n  issues[idx] = updated;\n  writeIssues(issues);\n  return updated;\n};\n\nexport const login = async (credentials: LoginCredentials) => {\n  return { token: 'fake-token', role: credentials.role };\n};\n\nexport const registerUser = async (data: RegistrationData) => {\n  return { success: true };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}