{"ast":null,"code":"export const formatDate = dateString => {\n  const options = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  return new Date(dateString).toLocaleDateString(undefined, options);\n};\nexport const validateImageFile = file => {\n  const validTypes = ['image/jpeg', 'image/png', 'image/gif'];\n  return validTypes.includes(file.type);\n};\nexport const generateUniqueId = () => {\n  return 'id-' + Math.random().toString(36).substr(2, 16);\n};\nexport const compressImage = async (file, options = {}) => {\n  var _options$maxWidth, _options$quality;\n  const maxWidth = (_options$maxWidth = options.maxWidth) !== null && _options$maxWidth !== void 0 ? _options$maxWidth : 1280;\n  const quality = (_options$quality = options.quality) !== null && _options$quality !== void 0 ? _options$quality : 0.7;\n  const imageBitmap = await createImageBitmap(file);\n  const scale = Math.min(1, maxWidth / imageBitmap.width);\n  const targetWidth = Math.round(imageBitmap.width * scale);\n  const targetHeight = Math.round(imageBitmap.height * scale);\n  const canvas = document.createElement('canvas');\n  canvas.width = targetWidth;\n  canvas.height = targetHeight;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return file;\n  ctx.drawImage(imageBitmap, 0, 0, targetWidth, targetHeight);\n  const blob = await new Promise(resolve => canvas.toBlob(b => resolve(b || file), 'image/jpeg', quality));\n  return new File([blob], file.name.replace(/\\.[^.]+$/, '.jpg'), {\n    type: 'image/jpeg'\n  });\n};","map":{"version":3,"names":["formatDate","dateString","options","year","month","day","Date","toLocaleDateString","undefined","validateImageFile","file","validTypes","includes","type","generateUniqueId","Math","random","toString","substr","compressImage","_options$maxWidth","_options$quality","maxWidth","quality","imageBitmap","createImageBitmap","scale","min","width","targetWidth","round","targetHeight","height","canvas","document","createElement","ctx","getContext","drawImage","blob","Promise","resolve","toBlob","b","File","name","replace"],"sources":["C:/SihApplication/civic issue appp/civic-issue-app/src/utils/helpers.ts"],"sourcesContent":["export const formatDate = (dateString: string): string => {\n  const options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n  return new Date(dateString).toLocaleDateString(undefined, options);\n};\n\nexport const validateImageFile = (file: File): boolean => {\n  const validTypes = ['image/jpeg', 'image/png', 'image/gif'];\n  return validTypes.includes(file.type);\n};\n\nexport const generateUniqueId = (): string => {\n  return 'id-' + Math.random().toString(36).substr(2, 16);\n};\n\nexport const compressImage = async (\n  file: File,\n  options: { maxWidth?: number; quality?: number } = {}\n): Promise<File> => {\n  const maxWidth = options.maxWidth ?? 1280;\n  const quality = options.quality ?? 0.7;\n\n  const imageBitmap = await createImageBitmap(file);\n  const scale = Math.min(1, maxWidth / imageBitmap.width);\n  const targetWidth = Math.round(imageBitmap.width * scale);\n  const targetHeight = Math.round(imageBitmap.height * scale);\n\n  const canvas = document.createElement('canvas');\n  canvas.width = targetWidth;\n  canvas.height = targetHeight;\n  const ctx = canvas.getContext('2d');\n  if (!ctx) return file;\n  ctx.drawImage(imageBitmap, 0, 0, targetWidth, targetHeight);\n\n  const blob: Blob = await new Promise((resolve) =>\n    canvas.toBlob((b) => resolve(b || file), 'image/jpeg', quality)\n  );\n\n  return new File([blob], file.name.replace(/\\.[^.]+$/, '.jpg'), { type: 'image/jpeg' });\n};"],"mappings":"AAAA,OAAO,MAAMA,UAAU,GAAIC,UAAkB,IAAa;EACxD,MAAMC,OAAmC,GAAG;IAAEC,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE,MAAM;IAAEC,GAAG,EAAE;EAAU,CAAC;EAC9F,OAAO,IAAIC,IAAI,CAACL,UAAU,CAAC,CAACM,kBAAkB,CAACC,SAAS,EAAEN,OAAO,CAAC;AACpE,CAAC;AAED,OAAO,MAAMO,iBAAiB,GAAIC,IAAU,IAAc;EACxD,MAAMC,UAAU,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,WAAW,CAAC;EAC3D,OAAOA,UAAU,CAACC,QAAQ,CAACF,IAAI,CAACG,IAAI,CAAC;AACvC,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAc;EAC5C,OAAO,KAAK,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;AACzD,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAC3BT,IAAU,EACVR,OAAgD,GAAG,CAAC,CAAC,KACnC;EAAA,IAAAkB,iBAAA,EAAAC,gBAAA;EAClB,MAAMC,QAAQ,IAAAF,iBAAA,GAAGlB,OAAO,CAACoB,QAAQ,cAAAF,iBAAA,cAAAA,iBAAA,GAAI,IAAI;EACzC,MAAMG,OAAO,IAAAF,gBAAA,GAAGnB,OAAO,CAACqB,OAAO,cAAAF,gBAAA,cAAAA,gBAAA,GAAI,GAAG;EAEtC,MAAMG,WAAW,GAAG,MAAMC,iBAAiB,CAACf,IAAI,CAAC;EACjD,MAAMgB,KAAK,GAAGX,IAAI,CAACY,GAAG,CAAC,CAAC,EAAEL,QAAQ,GAAGE,WAAW,CAACI,KAAK,CAAC;EACvD,MAAMC,WAAW,GAAGd,IAAI,CAACe,KAAK,CAACN,WAAW,CAACI,KAAK,GAAGF,KAAK,CAAC;EACzD,MAAMK,YAAY,GAAGhB,IAAI,CAACe,KAAK,CAACN,WAAW,CAACQ,MAAM,GAAGN,KAAK,CAAC;EAE3D,MAAMO,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;EAC/CF,MAAM,CAACL,KAAK,GAAGC,WAAW;EAC1BI,MAAM,CAACD,MAAM,GAAGD,YAAY;EAC5B,MAAMK,GAAG,GAAGH,MAAM,CAACI,UAAU,CAAC,IAAI,CAAC;EACnC,IAAI,CAACD,GAAG,EAAE,OAAO1B,IAAI;EACrB0B,GAAG,CAACE,SAAS,CAACd,WAAW,EAAE,CAAC,EAAE,CAAC,EAAEK,WAAW,EAAEE,YAAY,CAAC;EAE3D,MAAMQ,IAAU,GAAG,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAC3CR,MAAM,CAACS,MAAM,CAAEC,CAAC,IAAKF,OAAO,CAACE,CAAC,IAAIjC,IAAI,CAAC,EAAE,YAAY,EAAEa,OAAO,CAChE,CAAC;EAED,OAAO,IAAIqB,IAAI,CAAC,CAACL,IAAI,CAAC,EAAE7B,IAAI,CAACmC,IAAI,CAACC,OAAO,CAAC,UAAU,EAAE,MAAM,CAAC,EAAE;IAAEjC,IAAI,EAAE;EAAa,CAAC,CAAC;AACxF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}