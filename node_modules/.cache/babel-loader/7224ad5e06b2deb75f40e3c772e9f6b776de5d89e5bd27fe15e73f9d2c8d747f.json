{"ast":null,"code":"var _jsxFileName = \"C:\\\\SihApplication\\\\civic issue appp\\\\civic-issue-app\\\\src\\\\components\\\\UploadImage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { compressImage, validateImageFile } from '../utils/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadImage = ({\n  onImageUpload\n}) => {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const inputRef = useRef(null);\n  const handleImageChange = async event => {\n    var _event$target$files;\n    const file = (_event$target$files = event.target.files) === null || _event$target$files === void 0 ? void 0 : _event$target$files[0];\n    if (!file) return;\n    if (!validateImageFile(file)) return alert('Invalid image type');\n    const compressed = await compressImage(file, {\n      maxWidth: 1280,\n      quality: 0.7\n    });\n    setSelectedImage(compressed);\n    setPreviewUrl(URL.createObjectURL(compressed));\n    onImageUpload(compressed);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"upload-image\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"file\",\n      accept: \"image/*\",\n      capture: \"environment\",\n      onChange: handleImageChange,\n      style: {\n        display: 'none'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inline\",\n      style: {\n        marginBottom: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn\",\n        onClick: () => {\n          var _inputRef$current;\n          return (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.click();\n        },\n        children: \"Capture Photo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"hint\",\n        children: [\"Compressed: \", Math.round(selectedImage.size / 1024), \" KB\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), previewUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-preview\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: previewUrl,\n        alt: \"Preview\",\n        style: {\n          maxHeight: '200px',\n          maxWidth: '100%'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadImage, \"BWmdFK42c9FyponXCL5J5xjid6k=\");\n_c = UploadImage;\nexport default UploadImage;\nvar _c;\n$RefreshReg$(_c, \"UploadImage\");","map":{"version":3,"names":["React","useRef","useState","compressImage","validateImageFile","jsxDEV","_jsxDEV","UploadImage","onImageUpload","_s","selectedImage","setSelectedImage","previewUrl","setPreviewUrl","inputRef","handleImageChange","event","_event$target$files","file","target","files","alert","compressed","maxWidth","quality","URL","createObjectURL","className","children","ref","type","accept","capture","onChange","style","display","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","onClick","_inputRef$current","current","click","Math","round","size","src","alt","maxHeight","_c","$RefreshReg$"],"sources":["C:/SihApplication/civic issue appp/civic-issue-app/src/components/UploadImage.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { compressImage, validateImageFile } from '../utils/helpers';\n\nconst UploadImage: React.FC<{ onImageUpload: (file: File) => void }> = ({ onImageUpload }) => {\n  const [selectedImage, setSelectedImage] = useState<File | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(null);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  const handleImageChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n    if (!validateImageFile(file)) return alert('Invalid image type');\n    const compressed = await compressImage(file, { maxWidth: 1280, quality: 0.7 });\n    setSelectedImage(compressed);\n    setPreviewUrl(URL.createObjectURL(compressed));\n    onImageUpload(compressed);\n  };\n\n  return (\n    <div className=\"upload-image\">\n      <input\n        ref={inputRef}\n        type=\"file\"\n        accept=\"image/*\"\n        capture=\"environment\"\n        onChange={handleImageChange}\n        style={{ display: 'none' }}\n      />\n      <div className=\"inline\" style={{ marginBottom: 8 }}>\n        <button type=\"button\" className=\"btn\" onClick={() => inputRef.current?.click()}>Capture Photo</button>\n        {selectedImage && <span className=\"hint\">Compressed: {Math.round(selectedImage.size / 1024)} KB</span>}\n      </div>\n      {previewUrl && (\n        <div className=\"image-preview\">\n          <img src={previewUrl} alt=\"Preview\" style={{ maxHeight: '200px', maxWidth: '100%' }} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UploadImage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}