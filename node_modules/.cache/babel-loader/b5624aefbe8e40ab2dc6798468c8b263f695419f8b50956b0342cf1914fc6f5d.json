{"ast":null,"code":"import { v4 as uuid } from 'uuid';\n// In-memory mock database\nlet issues = [];\nlet notifications = [];\n\n// Seed with some demo issues\nconst now = new Date();\nif (issues.length === 0) {\n  issues = [{\n    id: uuid(),\n    title: 'Pothole on Main Street',\n    description: 'Large pothole near the bus stop causing traffic delays.',\n    category: 'roads',\n    priority: 'high',\n    status: 'reported',\n    location: {\n      address: 'Main St, Ward 4',\n      coordinates: {\n        lat: 12.9716,\n        lng: 77.5946\n      },\n      ward: '4',\n      district: 'Central'\n    },\n    images: ['https://picsum.photos/seed/pothole/800/400'],\n    reporterId: 'u-1',\n    reporterName: 'Alice',\n    assignedOfficialId: undefined,\n    assignedOfficialName: undefined,\n    createdAt: now,\n    updatedAt: now,\n    resolvedAt: undefined,\n    estimatedResolutionDate: undefined,\n    comments: [],\n    tags: ['traffic', 'safety'],\n    upvotes: 12,\n    downvotes: 1,\n    isPublic: true\n  }, {\n    id: uuid(),\n    title: 'Streetlight not working',\n    description: 'Streetlight near park has been off for a week.',\n    category: 'electricity',\n    priority: 'medium',\n    status: 'under_review',\n    location: {\n      address: 'Park Ave, Ward 2',\n      coordinates: {\n        lat: 12.9721,\n        lng: 77.5930\n      },\n      ward: '2',\n      district: 'North'\n    },\n    images: ['https://picsum.photos/seed/light/800/400'],\n    reporterId: 'u-2',\n    reporterName: 'Bob',\n    assignedOfficialId: 'o-12',\n    assignedOfficialName: 'Officer Rao',\n    createdAt: now,\n    updatedAt: now,\n    resolvedAt: undefined,\n    estimatedResolutionDate: undefined,\n    comments: [],\n    tags: ['park'],\n    upvotes: 4,\n    downvotes: 0,\n    isPublic: true\n  }];\n}\nconst delay = ms => new Promise(res => setTimeout(res, ms));\nexport const fetchIssues = async () => {\n  await delay(300);\n  return [...issues].sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n};\nexport const fetchIssueById = async id => {\n  await delay(200);\n  const found = issues.find(i => i.id === id);\n  if (!found) throw new Error('Issue not found');\n  return found;\n};\nexport const submitIssue = async issueData => {\n  var _issueData$title, _issueData$descriptio, _issueData$category, _issueData$priority, _issueData$location, _issueData$images, _issueData$reporterId, _issueData$reporterNa, _issueData$tags;\n  await delay(300);\n  const newIssue = {\n    id: uuid(),\n    title: (_issueData$title = issueData.title) !== null && _issueData$title !== void 0 ? _issueData$title : 'Untitled Issue',\n    description: (_issueData$descriptio = issueData.description) !== null && _issueData$descriptio !== void 0 ? _issueData$descriptio : '',\n    category: (_issueData$category = issueData.category) !== null && _issueData$category !== void 0 ? _issueData$category : 'other',\n    priority: (_issueData$priority = issueData.priority) !== null && _issueData$priority !== void 0 ? _issueData$priority : 'low',\n    status: 'reported',\n    location: (_issueData$location = issueData.location) !== null && _issueData$location !== void 0 ? _issueData$location : {\n      address: 'Unknown',\n      coordinates: {\n        lat: 0,\n        lng: 0\n      }\n    },\n    images: (_issueData$images = issueData.images) !== null && _issueData$images !== void 0 ? _issueData$images : [],\n    reporterId: (_issueData$reporterId = issueData.reporterId) !== null && _issueData$reporterId !== void 0 ? _issueData$reporterId : 'anonymous',\n    reporterName: (_issueData$reporterNa = issueData.reporterName) !== null && _issueData$reporterNa !== void 0 ? _issueData$reporterNa : 'Anonymous',\n    assignedOfficialId: undefined,\n    assignedOfficialName: undefined,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    resolvedAt: undefined,\n    estimatedResolutionDate: undefined,\n    comments: [],\n    tags: (_issueData$tags = issueData.tags) !== null && _issueData$tags !== void 0 ? _issueData$tags : [],\n    upvotes: 0,\n    downvotes: 0,\n    isPublic: true\n  };\n  issues.unshift(newIssue);\n  return newIssue;\n};\nexport const updateIssueStatus = async (id, status) => {\n  await delay(200);\n  const idx = issues.findIndex(i => i.id === id);\n  if (idx === -1) throw new Error('Issue not found');\n  issues[idx] = {\n    ...issues[idx],\n    status,\n    resolvedAt: status === 'resolved' ? new Date() : issues[idx].resolvedAt,\n    updatedAt: new Date()\n  };\n  return issues[idx];\n};\nexport const addComment = async (issueId, comment) => {\n  await delay(200);\n  const idx = issues.findIndex(i => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const newComment = {\n    id: uuid(),\n    issueId,\n    authorId: comment.authorId,\n    authorName: comment.authorName,\n    authorRole: comment.authorRole,\n    content: comment.content,\n    createdAt: new Date(),\n    isOfficial: comment.isOfficial\n  };\n  issues[idx] = {\n    ...issues[idx],\n    comments: [...issues[idx].comments, newComment],\n    updatedAt: new Date()\n  };\n  // create notification to reporter\n  notifications.unshift({\n    id: uuid(),\n    userId: issues[idx].reporterId,\n    type: 'comment',\n    title: 'New comment on your issue',\n    message: `${comment.authorName} commented on \"${issues[idx].title}\"`,\n    issueId,\n    isRead: false,\n    createdAt: new Date()\n  });\n  return issues[idx];\n};\nexport const searchIssues = async filters => {\n  await delay(200);\n  return issues.filter(i => {\n    if (filters.category && i.category !== filters.category) return false;\n    if (filters.status && i.status !== filters.status) return false;\n    if (filters.priority && i.priority !== filters.priority) return false;\n    if (filters.location && !i.location.address.toLowerCase().includes(filters.location.toLowerCase())) return false;\n    if (filters.assignedOfficial && i.assignedOfficialId !== filters.assignedOfficial) return false;\n    if (filters.dateRange) {\n      const t = i.createdAt.getTime();\n      if (t < filters.dateRange.start.getTime() || t > filters.dateRange.end.getTime()) return false;\n    }\n    return true;\n  });\n};\nexport const fetchNotifications = async userId => {\n  await delay(150);\n  return notifications.filter(n => n.userId === userId).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n};\nexport const markNotificationRead = async notificationId => {\n  await delay(100);\n  const idx = notifications.findIndex(n => n.id === notificationId);\n  if (idx !== -1) notifications[idx] = {\n    ...notifications[idx],\n    isRead: true\n  };\n};\nexport const getDashboardStats = async () => {\n  await delay(150);\n  const totalIssues = issues.length;\n  const resolvedIssues = issues.filter(i => i.status === 'resolved').length;\n  const criticalIssues = issues.filter(i => i.priority === 'critical').length;\n  const pendingIssues = totalIssues - resolvedIssues;\n  const categoryBreakdown = issues.reduce((acc, i) => {\n    acc[i.category] = (acc[i.category] || 0) + 1;\n    return acc;\n  }, {});\n  const statusBreakdown = issues.reduce((acc, i) => {\n    acc[i.status] = (acc[i.status] || 0) + 1;\n    return acc;\n  }, {});\n  return {\n    totalIssues,\n    resolvedIssues,\n    pendingIssues,\n    criticalIssues,\n    averageResolutionTime: 0,\n    categoryBreakdown,\n    statusBreakdown\n  };\n};\nexport const login = async credentials => {\n  await delay(200);\n  return {\n    token: 'mock-token',\n    role: credentials.role\n  };\n};\nexport const registerUser = async data => {\n  await delay(300);\n  return {\n    success: true\n  };\n};","map":{"version":3,"names":["v4","uuid","issues","notifications","now","Date","length","id","title","description","category","priority","status","location","address","coordinates","lat","lng","ward","district","images","reporterId","reporterName","assignedOfficialId","undefined","assignedOfficialName","createdAt","updatedAt","resolvedAt","estimatedResolutionDate","comments","tags","upvotes","downvotes","isPublic","delay","ms","Promise","res","setTimeout","fetchIssues","sort","a","b","getTime","fetchIssueById","found","find","i","Error","submitIssue","issueData","_issueData$title","_issueData$descriptio","_issueData$category","_issueData$priority","_issueData$location","_issueData$images","_issueData$reporterId","_issueData$reporterNa","_issueData$tags","newIssue","unshift","updateIssueStatus","idx","findIndex","addComment","issueId","comment","newComment","authorId","authorName","authorRole","content","isOfficial","userId","type","message","isRead","searchIssues","filters","filter","toLowerCase","includes","assignedOfficial","dateRange","t","start","end","fetchNotifications","n","markNotificationRead","notificationId","getDashboardStats","totalIssues","resolvedIssues","criticalIssues","pendingIssues","categoryBreakdown","reduce","acc","statusBreakdown","averageResolutionTime","login","credentials","token","role","registerUser","data","success"],"sources":["C:/SihApplication/civic issue appp/civic-issue-app/src/services/api.ts"],"sourcesContent":["import { v4 as uuid } from 'uuid';\nimport {\n  Issue,\n  LoginCredentials,\n  RegistrationData,\n  IssueFilters,\n  IssueStatus,\n  DashboardStats,\n  Comment,\n  Notification,\n} from '../types';\n\n// In-memory mock database\nlet issues: Issue[] = [];\nlet notifications: Notification[] = [];\n\n// Seed with some demo issues\nconst now = new Date();\nif (issues.length === 0) {\n  issues = [\n    {\n      id: uuid(),\n      title: 'Pothole on Main Street',\n      description: 'Large pothole near the bus stop causing traffic delays.',\n      category: 'roads',\n      priority: 'high',\n      status: 'reported',\n      location: {\n        address: 'Main St, Ward 4',\n        coordinates: { lat: 12.9716, lng: 77.5946 },\n        ward: '4',\n        district: 'Central',\n      },\n      images: ['https://picsum.photos/seed/pothole/800/400'],\n      reporterId: 'u-1',\n      reporterName: 'Alice',\n      assignedOfficialId: undefined,\n      assignedOfficialName: undefined,\n      createdAt: now,\n      updatedAt: now,\n      resolvedAt: undefined,\n      estimatedResolutionDate: undefined,\n      comments: [],\n      tags: ['traffic', 'safety'],\n      upvotes: 12,\n      downvotes: 1,\n      isPublic: true,\n    },\n    {\n      id: uuid(),\n      title: 'Streetlight not working',\n      description: 'Streetlight near park has been off for a week.',\n      category: 'electricity',\n      priority: 'medium',\n      status: 'under_review',\n      location: {\n        address: 'Park Ave, Ward 2',\n        coordinates: { lat: 12.9721, lng: 77.5930 },\n        ward: '2',\n        district: 'North',\n      },\n      images: ['https://picsum.photos/seed/light/800/400'],\n      reporterId: 'u-2',\n      reporterName: 'Bob',\n      assignedOfficialId: 'o-12',\n      assignedOfficialName: 'Officer Rao',\n      createdAt: now,\n      updatedAt: now,\n      resolvedAt: undefined,\n      estimatedResolutionDate: undefined,\n      comments: [],\n      tags: ['park'],\n      upvotes: 4,\n      downvotes: 0,\n      isPublic: true,\n    },\n  ];\n}\n\nconst delay = (ms: number) => new Promise((res) => setTimeout(res, ms));\n\nexport const fetchIssues = async (): Promise<Issue[]> => {\n  await delay(300);\n  return [...issues].sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n};\n\nexport const fetchIssueById = async (id: string): Promise<Issue> => {\n  await delay(200);\n  const found = issues.find((i) => i.id === id);\n  if (!found) throw new Error('Issue not found');\n  return found;\n};\n\nexport const submitIssue = async (issueData: Partial<Issue>): Promise<Issue> => {\n  await delay(300);\n  const newIssue: Issue = {\n    id: uuid(),\n    title: issueData.title ?? 'Untitled Issue',\n    description: issueData.description ?? '',\n    category: issueData.category ?? 'other',\n    priority: issueData.priority ?? 'low',\n    status: 'reported',\n    location: issueData.location ?? {\n      address: 'Unknown',\n      coordinates: { lat: 0, lng: 0 },\n    },\n    images: issueData.images ?? [],\n    reporterId: issueData.reporterId ?? 'anonymous',\n    reporterName: issueData.reporterName ?? 'Anonymous',\n    assignedOfficialId: undefined,\n    assignedOfficialName: undefined,\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    resolvedAt: undefined,\n    estimatedResolutionDate: undefined,\n    comments: [],\n    tags: issueData.tags ?? [],\n    upvotes: 0,\n    downvotes: 0,\n    isPublic: true,\n  };\n  issues.unshift(newIssue);\n  return newIssue;\n};\n\nexport const updateIssueStatus = async (\n  id: string,\n  status: IssueStatus\n): Promise<Issue> => {\n  await delay(200);\n  const idx = issues.findIndex((i) => i.id === id);\n  if (idx === -1) throw new Error('Issue not found');\n  issues[idx] = {\n    ...issues[idx],\n    status,\n    resolvedAt: status === 'resolved' ? new Date() : issues[idx].resolvedAt,\n    updatedAt: new Date(),\n  };\n  return issues[idx];\n};\n\nexport const addComment = async (\n  issueId: string,\n  comment: Pick<Comment, 'authorId' | 'authorName' | 'authorRole' | 'content' | 'isOfficial'>\n): Promise<Issue> => {\n  await delay(200);\n  const idx = issues.findIndex((i) => i.id === issueId);\n  if (idx === -1) throw new Error('Issue not found');\n  const newComment: Comment = {\n    id: uuid(),\n    issueId,\n    authorId: comment.authorId,\n    authorName: comment.authorName,\n    authorRole: comment.authorRole,\n    content: comment.content,\n    createdAt: new Date(),\n    isOfficial: comment.isOfficial,\n  };\n  issues[idx] = {\n    ...issues[idx],\n    comments: [...issues[idx].comments, newComment],\n    updatedAt: new Date(),\n  };\n  // create notification to reporter\n  notifications.unshift({\n    id: uuid(),\n    userId: issues[idx].reporterId,\n    type: 'comment',\n    title: 'New comment on your issue',\n    message: `${comment.authorName} commented on \"${issues[idx].title}\"`,\n    issueId,\n    isRead: false,\n    createdAt: new Date(),\n  });\n  return issues[idx];\n};\n\nexport const searchIssues = async (filters: IssueFilters): Promise<Issue[]> => {\n  await delay(200);\n  return issues.filter((i) => {\n    if (filters.category && i.category !== filters.category) return false;\n    if (filters.status && i.status !== filters.status) return false;\n    if (filters.priority && i.priority !== filters.priority) return false;\n    if (filters.location && !i.location.address.toLowerCase().includes(filters.location.toLowerCase())) return false;\n    if (filters.assignedOfficial && i.assignedOfficialId !== filters.assignedOfficial) return false;\n    if (filters.dateRange) {\n      const t = i.createdAt.getTime();\n      if (t < filters.dateRange.start.getTime() || t > filters.dateRange.end.getTime()) return false;\n    }\n    return true;\n  });\n};\n\nexport const fetchNotifications = async (userId: string): Promise<Notification[]> => {\n  await delay(150);\n  return notifications.filter((n) => n.userId === userId).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n};\n\nexport const markNotificationRead = async (notificationId: string): Promise<void> => {\n  await delay(100);\n  const idx = notifications.findIndex((n) => n.id === notificationId);\n  if (idx !== -1) notifications[idx] = { ...notifications[idx], isRead: true };\n};\n\nexport const getDashboardStats = async (): Promise<DashboardStats> => {\n  await delay(150);\n  const totalIssues = issues.length;\n  const resolvedIssues = issues.filter((i) => i.status === 'resolved').length;\n  const criticalIssues = issues.filter((i) => i.priority === 'critical').length;\n  const pendingIssues = totalIssues - resolvedIssues;\n  const categoryBreakdown = issues.reduce<any>((acc, i) => {\n    acc[i.category] = (acc[i.category] || 0) + 1;\n    return acc;\n  }, {});\n  const statusBreakdown = issues.reduce<any>((acc, i) => {\n    acc[i.status] = (acc[i.status] || 0) + 1;\n    return acc;\n  }, {});\n  return {\n    totalIssues,\n    resolvedIssues,\n    pendingIssues,\n    criticalIssues,\n    averageResolutionTime: 0,\n    categoryBreakdown,\n    statusBreakdown,\n  };\n};\n\nexport const login = async (credentials: LoginCredentials) => {\n  await delay(200);\n  return { token: 'mock-token', role: credentials.role };\n};\n\nexport const registerUser = async (data: RegistrationData) => {\n  await delay(300);\n  return { success: true };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}